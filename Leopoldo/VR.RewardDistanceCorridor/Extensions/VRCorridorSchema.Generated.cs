//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


namespace VRCorridorSchema
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (YamlDotNet v16.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class Landmark
    {
    
        private string _name;
    
        private string _meshType;
    
        private System.Collections.Generic.List<double> _translation;
    
        private System.Collections.Generic.List<double> _scale;
    
        private System.Collections.Generic.List<double> _rotation;
    
        private System.Collections.Generic.List<double> _ambientColor;
    
        private System.Collections.Generic.List<double> _diffuseColor;
    
        private System.Collections.Generic.List<double> _specularColor;
    
        private string _texture;
    
        public Landmark()
        {
            _translation = new System.Collections.Generic.List<double>();
            _scale = new System.Collections.Generic.List<double>();
            _rotation = new System.Collections.Generic.List<double>();
            _ambientColor = new System.Collections.Generic.List<double>();
            _diffuseColor = new System.Collections.Generic.List<double>();
            _specularColor = new System.Collections.Generic.List<double>();
        }
    
        protected Landmark(Landmark other)
        {
            _name = other._name;
            _meshType = other._meshType;
            _translation = other._translation;
            _scale = other._scale;
            _rotation = other._rotation;
            _ambientColor = other._ambientColor;
            _diffuseColor = other._diffuseColor;
            _specularColor = other._specularColor;
            _texture = other._texture;
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="Name")]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="MeshType")]
        public string MeshType
        {
            get
            {
                return _meshType;
            }
            set
            {
                _meshType = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="Translation")]
        public System.Collections.Generic.List<double> Translation
        {
            get
            {
                return _translation;
            }
            set
            {
                _translation = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="Scale")]
        public System.Collections.Generic.List<double> Scale
        {
            get
            {
                return _scale;
            }
            set
            {
                _scale = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="Rotation")]
        public System.Collections.Generic.List<double> Rotation
        {
            get
            {
                return _rotation;
            }
            set
            {
                _rotation = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="AmbientColor")]
        public System.Collections.Generic.List<double> AmbientColor
        {
            get
            {
                return _ambientColor;
            }
            set
            {
                _ambientColor = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="DiffuseColor")]
        public System.Collections.Generic.List<double> DiffuseColor
        {
            get
            {
                return _diffuseColor;
            }
            set
            {
                _diffuseColor = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="SpecularColor")]
        public System.Collections.Generic.List<double> SpecularColor
        {
            get
            {
                return _specularColor;
            }
            set
            {
                _specularColor = value;
            }
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="Texture")]
        public string Texture
        {
            get
            {
                return _texture;
            }
            set
            {
                _texture = value;
            }
        }
    
        public System.IObservable<Landmark> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Landmark(this)));
        }
    
        public System.IObservable<Landmark> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Landmark(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("Name = " + _name + ", ");
            stringBuilder.Append("MeshType = " + _meshType + ", ");
            stringBuilder.Append("Translation = " + _translation + ", ");
            stringBuilder.Append("Scale = " + _scale + ", ");
            stringBuilder.Append("Rotation = " + _rotation + ", ");
            stringBuilder.Append("AmbientColor = " + _ambientColor + ", ");
            stringBuilder.Append("DiffuseColor = " + _diffuseColor + ", ");
            stringBuilder.Append("SpecularColor = " + _specularColor + ", ");
            stringBuilder.Append("Texture = " + _texture);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (YamlDotNet v16.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class VRCorridorSchema
    {
    
        private System.Collections.Generic.List<Landmark> _landmarks;
    
        private System.Collections.Generic.List<Landmark> _arena;
    
        private System.Collections.Generic.List<Landmark> _reward;
    
        public VRCorridorSchema()
        {
            _landmarks = new System.Collections.Generic.List<Landmark>();
            _arena = new System.Collections.Generic.List<Landmark>();
            _reward = new System.Collections.Generic.List<Landmark>();
        }
    
        protected VRCorridorSchema(VRCorridorSchema other)
        {
            _landmarks = other._landmarks;
            _arena = other._arena;
            _reward = other._reward;
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="Landmarks")]
        public System.Collections.Generic.List<Landmark> Landmarks
        {
            get
            {
                return _landmarks;
            }
            set
            {
                _landmarks = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="Arena")]
        public System.Collections.Generic.List<Landmark> Arena
        {
            get
            {
                return _arena;
            }
            set
            {
                _arena = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="Reward")]
        public System.Collections.Generic.List<Landmark> Reward
        {
            get
            {
                return _reward;
            }
            set
            {
                _reward = value;
            }
        }
    
        public System.IObservable<VRCorridorSchema> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new VRCorridorSchema(this)));
        }
    
        public System.IObservable<VRCorridorSchema> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new VRCorridorSchema(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("Landmarks = " + _landmarks + ", ");
            stringBuilder.Append("Arena = " + _arena + ", ");
            stringBuilder.Append("Reward = " + _reward);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Serializes a sequence of data model objects into YAML strings.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (YamlDotNet v16.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Serializes a sequence of data model objects into YAML strings.")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [Bonsai.CombinatorAttribute()]
    public partial class SerializeToYaml
    {
    
        private System.IObservable<string> Process<T>(System.IObservable<T> source)
        {
            return System.Reactive.Linq.Observable.Defer(() =>
            {
                var serializer = new YamlDotNet.Serialization.SerializerBuilder()
                    .Build();
                return System.Reactive.Linq.Observable.Select(source, value => serializer.Serialize(value)); 
            });
        }

        public System.IObservable<string> Process(System.IObservable<Landmark> source)
        {
            return Process<Landmark>(source);
        }

        public System.IObservable<string> Process(System.IObservable<VRCorridorSchema> source)
        {
            return Process<VRCorridorSchema>(source);
        }
    }


    /// <summary>
    /// Deserializes a sequence of YAML strings into data model objects.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (YamlDotNet v16.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Deserializes a sequence of YAML strings into data model objects.")]
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Landmark>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<VRCorridorSchema>))]
    public partial class DeserializeFromYaml : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public DeserializeFromYaml()
        {
            Type = new Bonsai.Expressions.TypeMapping<VRCorridorSchema>();
        }

        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = (Bonsai.Expressions.TypeMapping)Type;
            var returnType = typeMapping.GetType().GetGenericArguments()[0];
            return System.Linq.Expressions.Expression.Call(
                typeof(DeserializeFromYaml),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

        private static System.IObservable<T> Process<T>(System.IObservable<string> source)
        {
            return System.Reactive.Linq.Observable.Defer(() =>
            {
                var serializer = new YamlDotNet.Serialization.DeserializerBuilder()
                    .Build();
                return System.Reactive.Linq.Observable.Select(source, value =>
                {
                    var reader = new System.IO.StringReader(value);
                    var parser = new YamlDotNet.Core.MergingParser(new YamlDotNet.Core.Parser(reader));
                    return serializer.Deserialize<T>(parser);
                });
            });
        }
    }
}